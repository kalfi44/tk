Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    DOTADD
    DOTSUB
    DOTMUL
    DOTDIV
    ADDASSIGN
    SUBASSIGN
    MULASSIGN
    DIVASSIGN
    GREATEREQUAL
    LOWEREQUAL
    NOTEQUAL
    EQUAL
    ID
    COMMENT
    IF
    THEN
    ELSE
    WHILE
    FOR
    BREAK
    CONTINUE
    RETURN
    ZEROES
    ONES
    EYE

Grammar

Rule 0     S' -> matrixline
Rule 1     matrixline -> [ matrixline ; valuelist ]
Rule 2     matrixline -> [ valuelist ]
Rule 3     valuelist -> valuelist , value
Rule 4     valuelist -> value
Rule 5     value -> STRING
Rule 6     value -> INTNUM
Rule 7     value -> FLOATNUM

Terminals, with rules where they appear

,                    : 3
;                    : 1
ADDASSIGN            : 
BREAK                : 
COMMENT              : 
CONTINUE             : 
DIVASSIGN            : 
DOTADD               : 
DOTDIV               : 
DOTMUL               : 
DOTSUB               : 
ELSE                 : 
EQUAL                : 
EYE                  : 
FLOATNUM             : 7
FOR                  : 
GREATEREQUAL         : 
ID                   : 
IF                   : 
INTNUM               : 6
LOWEREQUAL           : 
MULASSIGN            : 
NOTEQUAL             : 
ONES                 : 
RETURN               : 
STRING               : 5
SUBASSIGN            : 
THEN                 : 
WHILE                : 
ZEROES               : 
[                    : 1 2
]                    : 1 2
error                : 

Nonterminals, with rules where they appear

matrixline           : 1 0
value                : 3 4
valuelist            : 1 2 3

Parsing method: LALR

state 0

    (0) S' -> . matrixline
    (1) matrixline -> . [ matrixline ; valuelist ]
    (2) matrixline -> . [ valuelist ]

    [               shift and go to state 2

    matrixline                     shift and go to state 1

state 1

    (0) S' -> matrixline .



state 2

    (1) matrixline -> [ . matrixline ; valuelist ]
    (2) matrixline -> [ . valuelist ]
    (1) matrixline -> . [ matrixline ; valuelist ]
    (2) matrixline -> . [ valuelist ]
    (3) valuelist -> . valuelist , value
    (4) valuelist -> . value
    (5) value -> . STRING
    (6) value -> . INTNUM
    (7) value -> . FLOATNUM

    [               shift and go to state 2
    STRING          shift and go to state 6
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8

    matrixline                     shift and go to state 3
    valuelist                      shift and go to state 4
    value                          shift and go to state 5

state 3

    (1) matrixline -> [ matrixline . ; valuelist ]

    ;               shift and go to state 9


state 4

    (2) matrixline -> [ valuelist . ]
    (3) valuelist -> valuelist . , value

    ]               shift and go to state 10
    ,               shift and go to state 11


state 5

    (4) valuelist -> value .

    ]               reduce using rule 4 (valuelist -> value .)
    ,               reduce using rule 4 (valuelist -> value .)


state 6

    (5) value -> STRING .

    ]               reduce using rule 5 (value -> STRING .)
    ,               reduce using rule 5 (value -> STRING .)


state 7

    (6) value -> INTNUM .

    ]               reduce using rule 6 (value -> INTNUM .)
    ,               reduce using rule 6 (value -> INTNUM .)


state 8

    (7) value -> FLOATNUM .

    ]               reduce using rule 7 (value -> FLOATNUM .)
    ,               reduce using rule 7 (value -> FLOATNUM .)


state 9

    (1) matrixline -> [ matrixline ; . valuelist ]
    (3) valuelist -> . valuelist , value
    (4) valuelist -> . value
    (5) value -> . STRING
    (6) value -> . INTNUM
    (7) value -> . FLOATNUM

    STRING          shift and go to state 6
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8

    valuelist                      shift and go to state 12
    value                          shift and go to state 5

state 10

    (2) matrixline -> [ valuelist ] .

    $end            reduce using rule 2 (matrixline -> [ valuelist ] .)
    ;               reduce using rule 2 (matrixline -> [ valuelist ] .)


state 11

    (3) valuelist -> valuelist , . value
    (5) value -> . STRING
    (6) value -> . INTNUM
    (7) value -> . FLOATNUM

    STRING          shift and go to state 6
    INTNUM          shift and go to state 7
    FLOATNUM        shift and go to state 8

    value                          shift and go to state 13

state 12

    (1) matrixline -> [ matrixline ; valuelist . ]
    (3) valuelist -> valuelist . , value

    ]               shift and go to state 14
    ,               shift and go to state 11


state 13

    (3) valuelist -> valuelist , value .

    ]               reduce using rule 3 (valuelist -> valuelist , value .)
    ,               reduce using rule 3 (valuelist -> valuelist , value .)


state 14

    (1) matrixline -> [ matrixline ; valuelist ] .

    $end            reduce using rule 1 (matrixline -> [ matrixline ; valuelist ] .)
    ;               reduce using rule 1 (matrixline -> [ matrixline ; valuelist ] .)

